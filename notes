///////////////////////////////////////////////////////////////////////
BEST Practices

//////////////////////////////////////////////////////////////////////

PID 1 in Docker Containers
In Docker containers, the first process started (PID 1) has special responsibilities:

tini is a tiny but valid init system for Linux-based containers. It is designed to handle the responsibilities of PID 1 in a container, which include:

Reaping Zombie Processes: When a process terminates, its parent process must read its exit status. If the parent process does not do this, the terminated process becomes a "zombie" and can consume system resources. tini ensures that all child processes are properly reaped.

Forwarding Signals: Containers often need to handle system signals (e.g., SIGTERM, SIGINT) correctly to ensure graceful shutdowns. tini forwards these signals to the child processes, allowing them to handle the signals appropriately.

It reaps zombie processes.
It handles system signals.
If the process running as PID 1 in a container does not handle these responsibilities correctly, it can lead to issues such as memory leaks and improper signal handling.

Best Practices for Writing Dockerfiles
Use Official Base Images: Start with a minimal and secure base image.

Minimize Layers: Combine commands to reduce the number of layers.

Use Multi-Stage Builds: Reduce the final image size by using multi-stage builds.

Set a Non-Root User: Run your application as a non-root user for better security.

Use ENTRYPOINT and CMD Correctly: Use ENTRYPOINT for the main command and CMD for default arguments.

Handle PID 1 Correctly: Use an init system like tini to handle PID 1 responsibilities.

Example Dockerfile for WordPress


NGINX with TLSv1.2 or TLSv1.3 only =  config ssl(predecesseur de tsl) = > change les urls de http en https = securisation. 



///////////////////////////////////////////////////////////////////////
AVANT EVALUATION

//////////////////////////////////////////////////////////////////////

- changer sur le port 443 (sudo ). jai mis 1080 pour linstant 

V√©rifier que quand tu stop tes docker et que tu les relances tes donn√©es sont toujours pr√©sentes 

Pour se faire :
se log avec login.42.fr/wp-admin 
(Soit retourn√© sur la page d‚Äôaccueil et sur le poste, soit dans la page admin) √©crire un commentaire sur un poste ou en cr√©er un nouveau.
Si quand tu red√©marre le commentaire est encore l√† 
Il te reste plus que 2 chose √† v√©rifier :
Si tu a bien 2 user wordpresss (un admin et un autre (ATTENTION PAS DE LOGIN+MDP FACILE))

Et v√©rifier que tout tes mots de passe sont dans le .env que TU NE PUSH PAS et que tu ajoutera √† la main √† chaque correction
V√©rifie aussi si tu peux te connecter √† ton docker mariadb (command docker exec) 
normalement tu ne dois pas pouvoir te co en root sans mot passe (mysqld -h localhost -u root) si ca marche sans -p=$PASSWORD c‚Äôest pas bon
(Pour le modifier je te laisse checker comment Alter Table un User ROOT) 

///////////////////////////////////////////////////////////////////////

Tips VM :
passer en NAT plutot quen bridge
 run alias wp="wp --allow-root"

////////////////////////////////////////////////:
 GENERAL - docker:

////////////////////////////////////////////////

qller dqns le dosier de lappli
lancer docker build . ou par ex docker build -t nginx.

docker image ls


L'option -it que vous avez utilis√©e signifie :
-i : interactif
-t : alloue un pseudo-TTY

//////////////////////////////////////////////////
DOCKERFILE nginx
/////////////////////////////////////////////////////////

   openssl req


üí°
La commande req cr√©e et traite principalement des demandes de certificats au format PKCS#10. Elle peut en outre cr√©er des certificats auto-sign√©s.

RUN mkdir -p /etc/nginx/ssl -  dossier, qui permettra de stocker le certificat et la clef pour une connexion s√©curis√©e


OpenSSL:  l‚Äôoutil principal pour la gestion/cr√©ation de certificat SSL
Nous rajouterons ensuite le mot clef -x509 pour pr√©ciser le type du certificat.

-nodes : eviter la demande de mdp


-out /etc/nginx/ssl/inception.crt -keyout /etc/nginx/ssl/inception.key  :  indiquer √† OpenSSL o√π l‚Äôon souhaite stocker le certificat et la clef de notre SSL en rajoutant les options -out et -keyout

-subj eviter  d‚Äôavoir un prompt qui requiert certaines informations pour le certificat.

   RUN mkdir -p /var/run/nginx :  cr√©er un dossier qui nous permettra de stocker les fichiers de config de NGINX.


   Fonctionnement
Par d√©faut, Nginx s'ex√©cute comme un d√©mon, ce qui signifie qu'il fonctionne en arri√®re-plan.
L'option "-g 'daemon off;'" force Nginx √† rester au premier plan.
Utilit√© dans Docker
Cette configuration est particuli√®rement utile dans un environnement Docker pour plusieurs raisons :
Visibilit√© des logs : En mode premier plan, Nginx affiche ses logs directement dans la console du conteneur, facilitant le d√©bogage.
Gestion des processus : Docker peut mieux surveiller et g√©rer le processus Nginx lorsqu'il est au premier plan.
Arr√™t propre : Cela permet √† Docker d'envoyer correctement les signaux d'arr√™t √† Nginx lors de l'arr√™t du conteneur.

//////////////////////////////////////////////////
DOCKER COMPOSE
/////////////////////////////////////////////////////////

   docker-compose -f  <path_docker_compose>  -d ‚Äîbuild =>  build le docker compose 
   Pour l‚Äôarr√™ter :    docker-compose -f  <path_docker_compose>  stop
   Pour supprimer le build :    docker-compose -f  <path_docker_compose>  down -v

   Si vous rencontrez des probl√®mes avec docker vous pouvez utiliser la commande :

   docker system prune -af



//////////////////////////////////////////////////
EXPLICATION MAKEFILE
/////////////////////////////////////////////////////////

.PHONY: up
up: $(WORDPRESS_VOLUME_PATH) $(MARIADB_VOLUME_PATH)
	$(DOCKER_COMPOSE) up --build 
   ==> Cette r√®gle d√©marre les conteneurs en reconstruisant les images si n√©cessaire.


   docker-compose down
Cette commande :
Arr√™te tous les conteneurs en cours d'ex√©cution.
Supprime les conteneurs arr√™t√©s.
Supprime les r√©seaux d√©finis dans le fichier docker-compose.yml.
Par d√©faut, elle pr√©serve les volumes nomm√©s d√©finis dans le fichier docker-compose.yml1.
docker-compose stop
Cette commande :
Arr√™te les conteneurs en cours d'ex√©cution.
Conserve les conteneurs arr√™t√©s, les r√©seaux et les volumes1.



//////////////////////////////////////////////////
Fonctionnement
/////////////////////////////////////////////////////////


Les requ√™tes entrantes arrivent sur le port 443 de Nginx.
Nginx transmet les requ√™tes PHP √† WordPress sur le port 9000.
WordPress traite la requ√™te, en se connectant si n√©cessaire √† MariaDB sur le port 3306.
WordPress renvoie le r√©sultat √† Nginx.
Nginx renvoie la r√©ponse finale au client.


////////////////////////////////////////////////////////////////////////////////////////////////////
pourquoi utiliser un serveur proxy ? = un serveur situe devant un groupe dordinateurs clients  
///////////////////////////////////////////////////////////////////////////////////////////////////////////

Pour √©viter les restrictions de navigation impos√©es par l'√âtat ou les institutions : certains gouvernements, √©coles et autres organisations emploient des pare-feu pour offrir √† leurs utilisateurs un acc√®s √† une version limit√©e d'Internet. Un proxy de transfert peut permettre de contourner ces restrictions, car l'utilisateur se connecte alors au proxy plut√¥t que directement aux sites visit√©s.
Pour bloquer l'acc√®s √† certains contenus : inversement, la mise en place d'un proxy peut √©galement servir √† emp√™cher un groupe d'utilisateurs d'acc√©der √† certains sites. Un r√©seau scolaire peut, par exemple, √™tre configur√© pour se connecter au web par l'interm√©diaire d'un proxy disposant de r√®gles de filtrage de contenu charg√©es de refuser la transmission des r√©ponses provenant de Facebook et d'autres sites de r√©seaux sociaux.
Pour prot√©ger son identit√© en ligne : dans certains cas, les internautes ordinaires souhaitent simplement profiter d'un anonymat accru en ligne, mais dans d'autres, les internautes consid√©r√©s comme dissidents politiques par leur gouvernement peuvent s'exposer √† de graves sanctions dans certains pays. La critique du gouvernement sur un forum web ou sur les r√©seaux sociaux peut entra√Æner des amendes ou des peines d'emprisonnement pour ces utilisateurs. Si l'un de ces dissidents passe par un proxy de transfert pour se connecter √† un site web sur lequel il publie des commentaires politiquement sensibles, l'adresse IP utilis√©e pour publier ces commentaires sera plus difficile √† remonter. En effet, seule l'adresse IP du serveur proxy sera visible.

////////////////////////////////////////////////////////////////////////////////////////////////////
pourquoi utiliser un proxy inverse ? = un serveur situe devant un groupe de origin server  
///////////////////////////////////////////////////////////////////////////////////////////////////////////

√âquilibrage de charge : un site web populaire accueillant des millions d'utilisateurs chaque jour peut ne pas √™tre en mesure de g√©rer l'ensemble du trafic entrant sur son site √† l'aide d'un seul serveur d'origine. √Ä la place, le site peut √™tre r√©parti sur un ensemble de serveurs diff√©rents, tous d√©di√©s au traitement des requ√™tes pour le m√™me site. Dans ce cas, un proxy inverse peut constituer une solution d'√©quilibrage de charge permettant de distribuer le trafic entrant de mani√®re √©gale entre les diff√©rents serveurs afin d'√©viter la surcharge de l'un d'entre eux. En cas de d√©faillance compl√®te d'un serveur, les autres serveurs peuvent prendre le relais pour g√©rer le trafic.
Protection contre les attaques : avec un proxy inverse en place, un site ou un service web n'a jamais besoin de r√©v√©ler l'adresse IP de son ou ses serveurs d'origine. Il est donc beaucoup plus difficile pour les pirates de lancer une attaque cibl√©e contre eux, comme une attaque DDoS. Les pirates ne pourront alors viser que le proxy inverse (comme le r√©seau CDN de Cloudflare), qui peut compter sur une s√©curit√© plus stricte et davantage de ressources pour repousser une cyberattaque.
√âquilibrage de la charge des serveurs √† l'√©chelle mondiale (Global Server Load Balancing, GSLB) : cette forme d'√©quilibrage de charge permet √† un site web d'√™tre distribu√© sur plusieurs serveurs dans le monde entier. Le proxy inverse redirigera alors les clients vers le serveur le plus proche g√©ographiquement. Cette solution permet de r√©duire les distances que les requ√™tes et les r√©ponses doivent parcourir, minimisant ainsi les temps de chargement.
Mise en cache : un proxy inverse peut √©galement mettre en cache le contenu afin d'am√©liorer la rapidit√© d'un site. Ainsi, un utilisateur √† Paris visitant un site web associ√© √† un proxy inverse (et disposant de serveurs web √† Los Angeles) pourrait en fait se connecter √† un serveur proxy inverse local √† Paris, qui se chargera ensuite de communiquer avec un serveur d'origine √† Los Angeles. Le serveur proxy pourra alors mettre en cache (ou enregistrer temporairement) les donn√©es de r√©ponse. Les utilisateurs parisiens qui se rendront par la suite sur ce site obtiendront la version mise en cache localement en r√©ponse du serveur de proxy inverse parisien, entra√Ænant ainsi une exp√©rience de navigation plus rapide.
Chiffrement SSL : le chiffrement et le d√©chiffrement des communications SSL (ou TLS) de chaque client peuvent s'av√©rer co√ªteux en termes de calcul pour un serveur d'origine. Un proxy inverse peut ainsi √™tre configur√© pour d√©chiffrer toutes les requ√™tes entrantes et chiffrer l'ensemble des r√©ponses sortantes, afin de lib√©rer de pr√©cieuses ressources sur le serveur d'origine.

////////////////////////////////////////////////////////////////////////////////////////////////////
PHP
///////////////////////////////////////////////////////////////////////////////////////////////////////////


WordPress est une application web √©crite en PHP. PHP est le langage de programmation qui fait fonctionner WordPress. Lorsque vous visitez un site WordPress, le serveur web (par exemple, Nginx ou Apache) passe la demande √† PHP. PHP ex√©cute alors le code WordPress, qui g√©n√®re la page web √† afficher.

Sans PHP, WordPress ne pourrait pas fonctionner. C'est pourquoi vous devez avoir PHP install√© et configur√© sur votre serveur pour faire fonctionner WordPress. De plus, PHP doit √™tre configur√© pour pouvoir communiquer avec votre serveur web, ce qui est souvent r√©alis√© en utilisant PHP-FPM.


Une "pool" dans PHP-FPM est un ensemble de processus PHP qui sont pr√™ts √† r√©pondre aux demandes. Chaque pool peut avoir sa propre configuration, ce qui permet de s√©parer les diff√©rentes applications PHP sur le m√™me serveur. Par exemple, vous pouvez avoir une pool pour votre application WordPress et une autre pour une application Laravel, chacune avec sa propre configuration.

Dans le contexte de PHP-FPM :

Un "processus" est une instance de PHP qui est pr√™te √† ex√©cuter un script PHP.

"Forker" un processus signifie cr√©er un nouveau processus en copiant le processus existant.

Un "processus inactif" (idle process) est un processus qui n'est pas actuellement utilis√© pour ex√©cuter un script PHP. Il est "au repos", en attente d'une nouvelle demande.

Les param√®tres pm.min_spare_servers et pm.max_spare_servers dans le fichier de configuration de PHP-FPM d√©terminent le nombre minimum et maximum de processus inactifs que PHP-FPM maintiendra. Si le nombre de processus inactifs tombe en dessous de pm.min_spare_servers, PHP-FPM cr√©era de nouveaux processus. Si le nombre de processus inactifs d√©passe pm.max_spare_servers, PHP-FPM arr√™tera les processus exc√©dentaires. Cela permet de g√©rer efficacement les ressources du serveur.

////////////////////////////////////////////////////////////////////////////////////////////////////
maria db - docker file
///////////////////////////////////////////////////////////////////////////////////////////////////////////

Les variables d√©finies avec ARG peuvent √™tre utilis√©es dans les commandes RUN pour installer des logiciels ou effectuer d'autres actions durant la construction de l'image.
Configuration de la base de donn√©es :

Les variables d'environnement sont utilis√©es pour cr√©er la base de donn√©es et l'utilisateur MySQL. Si l'une d'elles n'est pas d√©finie, le script ne pourra pas fonctionner correctement, ce qui peut entra√Æner des erreurs lors de la configuration de la base de donn√©es.
S√©curit√© :

La v√©rification des variables d'environnement au d√©but du script assure que le script ne s'ex√©cute pas dans un √©tat partiel ou incorrect, ce qui peut avoir des implications de s√©curit√©, comme la cr√©ation d'utilisateurs ou de bases de donn√©es sans mots de passe ou avec des mots de passe par d√©faut.

////////////////////////////////////////////////////////////////////////////////////////////////////
maria db - script
///////////////////////////////////////////////////////////////////////////////////////////////////////////

R√©sum√© de l'ordre des op√©rations dans le script :
D√©marrer MySQL en mode s√©curis√© :

bash
Copy code
mysqld_safe --skip-networking &
Cela d√©marre MySQL en arri√®re-plan, avec l'option --skip-networking pour d√©sactiver les connexions r√©seau, ce qui est utile pour l'initialisation sans risques de connexions ext√©rieures.

Attendre que MySQL soit pr√™t :

bash
Copy code
until mysqladmin ping &>/dev/null; do
    echo -n "."; sleep 1
done
Cette boucle attend que le serveur MySQL soit compl√®tement op√©rationnel avant d'ex√©cuter les commandes SQL.

Ex√©cuter les commandes SQL : Cela inclut la cr√©ation de la base de donn√©es, la cr√©ation de l'utilisateur et la d√©finition des privil√®ges.

Arr√™ter MySQL proprement :

bash
Copy code
mysqladmin -u root -p${SQL_ROOT_PASSWORD} shutdown
Cela garantit que MySQL est arr√™t√© de mani√®re ordonn√©e apr√®s la configuration.

Red√©marrer MySQL en avant-plan :

bash
Copy code
exec mysqld_safe
Cela d√©marre le serveur MySQL en avant-plan, ce qui est n√©cessaire pour que le conteneur Docker reste actif.

En r√©sum√©, cette commande fait partie d'un processus d'initialisation o√π le serveur MySQL est temporairement d√©marr√© pour la configuration, puis arr√™t√© avant d'√™tre relanc√© correctement pour le fonctionnement normal dans le conteneur Docker.

////////////////////////////////////////////////////////////////////////////////////////////////////

AVATANGES DOCKER
///////////////////////////////////////////////////////////////////////////////////////////////////////////


The difference between a Docker image used with docker-compose and
without docker-compose
Bot image for Assistant

Assistant
Poe

The difference between using a Docker image with Docker Compose and without Docker Compose primarily revolves around management, orchestration, and configuration of containerized applications. Here‚Äôs a detailed comparison:
Using Docker Images Without Docker Compose

    Single Container Focus:
        Typically, you manage one container at a time using the Docker CLI. You use commands like docker run to start individual containers.

    Manual Configuration:
        Each time you run a container, you specify configuration parameters (like environment variables, port mappings, volume mounts, etc.) directly in the command line. This can lead to repetitive and error-prone processes. Example:
        bash

        docker run -d -p 80:80 --name my_container my_image:latest

    Limited Orchestration:
        Managing multiple containers requires running separate commands for each container. You must ensure they are started in the correct order, as Docker does not handle dependencies automatically.

    Scaling and Networking Challenges:
        Scaling (running multiple instances of a container) requires additional commands and manual adjustments. Networking between containers must also be set up manually, which can complicate interactions.

    No Centralized Configuration:
        Configuration is spread across various command lines, making it harder to manage and understand the overall architecture of the application.

Using Docker Images With Docker Compose

    Multi-Container Management:
        Docker Compose is designed for applications that consist of multiple services (containers). It allows you to define and run multiple containers as a single application.

    Centralized Configuration:
        All configurations (environment variables, ports, volumes, etc.) are defined in a single docker-compose.yml file. This centralizes the setup and makes it easier to manage and understand the application structure. Example:
        yaml

    version: '3'
    services:
      web:
        image: my_image:latest
        ports:
          - "80:80"
      db:
        image: postgres
        environment:
          POSTGRES_DB: mydb

Automatic Orchestration:

    Docker Compose automatically handles the orchestration of multiple containers, including starting and stopping them in the correct order based on dependencies defined in the Compose file. You can start the entire application with a single command:
    bash

    docker-compose up

Easy Scaling:

    You can easily scale services by specifying the number of instances directly in the Compose file or using a command:
    bash

        docker-compose up --scale web=3

    Simplified Networking:
        Docker Compose automatically creates a network for the services defined in the docker-compose.yml, allowing them to communicate easily. This eliminates the need for manual network configuration.

Summary

    Without Docker Compose: Focused on single container management, requiring manual configuration and orchestration, which can lead to complexity and errors, especially with multi-container applications.

    With Docker Compose: Designed for multi-container applications, providing centralized configuration, automatic orchestration, easy scaling, and simplified networking.

Using Docker Compose enhances productivity and reduces complexity, especially for complex applications with multiple interdependent services.

The benefit of Docker compared to VMs
Bot image for Assistant

Assistant
Poe

Docker and virtual machines (VMs) are both popular technologies for isolating applications, but they operate differently and have distinct benefits. Here are the key advantages of using Docker (containers) compared to traditional VMs:
1. Lightweight:

    Docker: Containers share the host OS kernel, making them much lighter in terms of system resources. This allows you to run more containers on the same hardware compared to VMs.
    VMs: Each VM requires its own OS instance, which consumes more CPU, memory, and storage.

2. Faster Startup Times:

    Docker: Containers can start almost instantly because they don‚Äôt need to boot an entire OS. This leads to quicker deployment and scaling of applications.
    VMs: VMs take longer to start as they must boot an entire operating system.

3. Portability:

    Docker: Containers can run consistently across different environments (development, testing, production) without compatibility issues, thanks to the abstraction from the underlying hardware and OS.
    VMs: While VMs are also portable, they can face challenges due to differences in hypervisor implementations and underlying hardware.

4. Resource Efficiency:

    Docker: Containers use system resources more efficiently since they share the host OS kernel. This leads to better overall utilization of system resources.
    VMs: Each VM has its own OS, leading to higher overhead and less efficient resource usage.

5. Simplified Management:

    Docker: The Docker ecosystem provides tools (like Docker Compose and Docker Swarm) to easily manage and orchestrate multiple containers, making deployment and scaling straightforward.
    VMs: Managing multiple VMs can be more complex, often requiring additional tools for orchestration and configuration management.

6. Version Control and Rollbacks:

    Docker: Images can be versioned, allowing for easy rollbacks to previous versions. You can create a new image from a running container, making it easy to manage application updates.
    VMs: While VMs can also be snapshot, managing versions and rollbacks can be less straightforward compared to Docker images.

7. Microservices Architecture:

    Docker: Docker supports microservices architecture well, allowing you to break applications into smaller, independent services that can be developed, deployed, and scaled separately.
    VMs: While you can implement microservices using VMs, the overhead makes it less efficient than using containers.

8. Development Workflow:

    Docker: Docker simplifies development workflows by allowing developers to create and test applications in containers that mimic production environments closely.
    VMs: While VMs can also provide isolated environments, the overhead and complexity can hinder rapid development cycles.

Summary

    Docker is lightweight, fast, and resource-efficient, making it ideal for modern application development and deployment, particularly in microservices architectures.
    VMs provide stronger isolation and are suitable for running applications that require distinct operating systems or legacy applications that cannot be containerized.

Choosing between Docker and VMs often depends on specific use cases, resource constraints, and operational requirements.


Davina est une coll√®gue extr√™mement agr√©able avec tout le monde, disponible, claire et pr√©cise dans tout ce qu'elle entreprend. Davina a un r√©el esprit d'√©quipe et fera tout pour le bien de son √©quipe et de son entreprise. Elle a aussi une vision d'ensemble et de diplomatie qui peuvent d√©m√™ler des situations compliqu√©es. C'√©tait un immense plaisir de l'avoir comme coll√®gue √† la Savonnerie du Midi !



PORT MARIADB
 ÓÇ† main U:2 ÓÇ∞ ~/docker ÓÇ∞                                                                                                                                                                        ÓÇ≤ 20:51:13 ÓÇ≤ fanny 
 1 ‚ùØ docker inspect   -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mariadb

mysql --host=172.18.0.2 --port="3306" -u root -p

In MariaDB container :

mysql -u <username> -p : Will connect you to the database and prompt you with the user password, you can use the root one as well as the db_user one, both must have a password.
SHOW DATABASE; : will list all available databases, should be two, the default one and yours that should be named by your dockerfile commands.
USE <db_name>; : Gives you access to the named database, Terminal prompt should look like MariaDB [db_name].
SHOW TABLES; : Display a list of tables currently available in the current db.
SELECT * FROM <table_name>; : Should display the whole content defined by * of the selected table from the list given by SHOW TABLES;, wp_users should as example display admin and users currently registered to wordpress linked to the database.
